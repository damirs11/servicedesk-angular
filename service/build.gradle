/**
 * Модуль сервисного слоя приложения.
 */

configurations {
    ajc
    aspects
    provided // для добавления возможностей использования provided-зависимостей
}

apply plugin: 'java'

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    // для добавления возможностей использования provided-зависимостей
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

dependencies {
    compile project(':common')
    compile project(':model')
    compile project(':dao')
    compile project(':hp-api')
    provided "javax.servlet:javax.servlet-api:$servletVersion"

    // подключаем внешние библиотеки
    compile fileTree(include: ['*.jar'], dir: '../lib')

    // Безопасность
    compile "org.springframework.security:spring-security-core:$springSecurityVersion"
    compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.security:spring-security-aspects:$springSecurityVersion"

    // тестирование
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "org.springframework.security:spring-security-test:$springSecurityVersion"
    testCompile "org.testng:testng:$testngVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    compile "org.hsqldb:hsqldb:$hsqldbVersion"
    compile "com.jolbox:bonecp:$boneCPVersion"
    // логирование
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion" //Commons logging API over slf4j
    compile "org.slf4j:log4j-over-slf4j:$slf4jVersion" //log4j API over slf4j
    compile "org.slf4j:jul-to-slf4j:$slf4jVersion" //java.util.logging over slf4j
    // кэширование
    compile "net.sf.ehcache:ehcache:$ehcacheVersion"

    compile "org.springframework:spring-aspects:$springVersion"
    compile "commons-io:commons-io:$apacheCommonsIOVersion"

    // Для упрощения работы со свойствами бинов
    compile "commons-beanutils:commons-beanutils:$commonsBeanUtils"
    // AspectJ proxying for transactions
    compile "org.aspectj:aspectjrt:$aspectjVersion"
    ajc "org.aspectj:aspectjtools:$aspectjVersion"
    aspects "org.springframework:spring-aspects:$springVersion"
    aspects "org.springframework.security:spring-security-aspects:$springSecurityVersion"
    aspects "org.springframework:spring-tx:$springVersion"
    //работа с excel
    compile "org.apache.poi:poi:$poiVersion"
    compile "org.apache.poi:poi-ooxml:$poiVersion"

    //работа с csv
    compile 'com.opencsv:opencsv:3.8'

    // Для перевода чисел в прописной формат
    //compile group: 'com.ibm.icu', name: 'icu4j', version: '57.1' //10MB

    //Работа с почтой
    compile 'javax.mail:mail:1.4.7'
    //работа с zip-архивами
    compile 'org.apache.commons:commons-compress:1.13'
    //compile group: 'org.quartz-scheduler', name: 'quartz', version: '2.3.0'
}

/**
 * Запускаем AspectJ после компиляции Java
 */
compileJava {
    doLast{
        println 'aspectj compile'
        ant.taskdef(
                resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties",
                classpath: configurations.ajc.asPath)
        ant.iajc(
                source: project.sourceCompatibility,
                target: project.targetCompatibility,
                destDir: sourceSets.main.output.classesDir.absolutePath,
                maxmem: "1024m",
                fork: "true",
                aspectPath: configurations.aspects.asPath,
                classpath: configurations.compile.asPath){
            sourceroots{
                sourceSets.main.java.srcDirs.each{
                    pathelement(location:it.absolutePath)
                }
            }
        }
    }
}

test {
    useTestNG()
    systemProperty "file.encoding", "utf-8"
}