/**
 * Модуль веб-приложения. Реализует RESTfull сервисы, доступные только авторизованным пользователям.
 * Прочая статика (html, css, js и т.д.) находится в открытом доступе.
 */
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        // extract info from git
        classpath "org.ajoberstar:gradle-git:$gradleGitVersion"
        // tomcat(jetty) http://akhikhl.github.io/gretty-doc
        classpath "gradle.plugin.org.akhikhl.gretty:gretty:1.4.2"
    }
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: "org.ajoberstar.grgit"
apply plugin: "org.akhikhl.gretty"

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compile project(':common')
    compile project(':model')
    compile project(':dao')
    compile project(':service')
    providedCompile "javax.servlet:javax.servlet-api:$servletVersion"
    compile "org.springframework:spring-webmvc"
    compile "org.springframework:spring-context:$springVersion"
    // Кэширование
    compile "org.springframework:spring-context-support:$springSecurityVersion" //Support for Ehcache and others
    compile "net.sf.ehcache:ehcache:$ehcacheVersion"
    // Безопасность
    compile "org.springframework.security:spring-security-core:$springSecurityVersion"
    compile "org.springframework.security:spring-security-config:$springSecurityVersion"
    compile "org.springframework.security:spring-security-web:$springSecurityVersion"
    // Логирование
    compile "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.slf4j:jcl-over-slf4j:$slf4jVersion" //Commons logging API over slf4j
    compile "org.slf4j:log4j-over-slf4j:$slf4jVersion" //log4j API over slf4j
    compile "org.slf4j:jul-to-slf4j:$slf4jVersion" //java.util.logging over slf4j

    compile "com.fasterxml.jackson.core:jackson-core:$jacksonFasterXmlVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonFasterXmlVersion"
    compile "org.codehaus.jackson:jackson-core-asl:$jacksonCodehausVersion"
    compile "org.codehaus.jackson:jackson-mapper-asl:$jacksonCodehausVersion"

    compile "commons-fileupload:commons-fileupload:$apacheCommonsFileUploadVersion"
    compile "org.apache.commons:commons-io:$apacheCommonsIOVersion"
    compile "org.hsqldb:hsqldb:$hsqldbVersion"
    compile "com.jolbox:bonecp:$boneCPVersion"

    // тестирование
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "org.testng:testng:$testngVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "org.hsqldb:hsqldb:$hsqldbVersion"
    testCompile "com.jolbox:bonecp:$boneCPVersion"
    testCompile "com.jayway.jsonpath:json-path:$jsonpathVersion"
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    testCompile "org.hamcrest:hamcrest-integration:$hamcrestVersion"
}

war.baseName = 'sd'
def staticWebContentPath = '../client/build/dist'

war {
    // Добавляем статический контент в корень war-файла
    from staticWebContentPath
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.specification.vendor')})",
                'Build-Date': (new Date()).format('dd.MM.yyyy HH:mm:ss'),
                'Implementation-Title': "$applicationName",
                'Implementation-Version': project.version,
                'Implementation-Vendor': "$developerName",
                'Git-Revision': "${grgit.head().abbreviatedId}",
                'Git-Date': "${grgit.head().date.format('dd.MM.yyyy HH:mm:ss')}"
        )
    }
}

gretty {
    jvmArgs = ["-Dfile.encoding=UTF-8"]
    servletContainer = "tomcat8"
    contextPath = war.baseName
    httpEnabled = false
    httpsEnabled = true
    scanInterval = 0 //defines scan interval, in seconds. When set to zero, hot deployment is fully disabled.
    logDir = "$buildDir/logs"
    extraResourceBase(staticWebContentPath)
}

test {
    useTestNG()
    systemProperty "file.encoding", "utf-8"
}